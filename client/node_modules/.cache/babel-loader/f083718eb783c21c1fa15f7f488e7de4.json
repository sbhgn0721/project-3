{"ast":null,"code":"import auth0 from 'auth0-js';\n\nclass Auth {\n  constructor() {\n    this.auth0 = new auth0.WebAuth({\n      // the following three lines MUST be updated\n      domain: 'bananaco.auth0.com',\n      audience: 'https://bananaco.auth0.com/userinfo',\n      clientID: 'wattIvPVEm2TSZV0lKxrY65uTtz6VM1o',\n      redirectUri: 'http://localhost:3000/callback',\n      responseType: 'id_token',\n      scope: 'openid profile'\n    });\n    this.getProfile = this.getProfile.bind(this);\n    this.handleAuthentication = this.handleAuthentication.bind(this);\n    this.isAuthenticated = this.isAuthenticated.bind(this);\n    this.signIn = this.signIn.bind(this);\n    this.signOut = this.signOut.bind(this);\n  }\n\n  getProfile() {\n    return this.profile;\n  }\n\n  getIdToken() {\n    return this.idToken;\n  }\n\n  isAuthenticated() {\n    return new Date().getTime() < this.expiresAt;\n  }\n\n  signIn() {\n    this.auth0.authorize();\n  }\n\n  handleAuthentication() {\n    return new Promise((resolve, reject) => {\n      this.auth0.parseHash((err, authResult) => {\n        if (err) return reject(err);\n\n        if (!authResult || !authResult.idToken) {\n          return reject(err);\n        }\n\n        this.setSession(authResult);\n        resolve();\n      });\n    });\n  }\n\n  setSession(authResult) {\n    this.idToken = authResult.idToken;\n    this.profile = authResult.idTokenPayload; // set the time that the id token will expire at\n\n    this.expiresAt = authResult.idTokenPayload.exp * 1000;\n  }\n\n  signOut() {\n    this.auth0.logout({\n      returnTo: 'http://localhost:3000',\n      clientID: 'wattIvPVEm2TSZV0lKxrY65uTtz6VM1o'\n    });\n  }\n\n  silentAuth() {\n    return new Promise((resolve, reject) => {\n      this.auth0.checkSession({}, (err, authResult) => {\n        if (err) return reject(err);\n        this.setSession(authResult);\n        resolve();\n      });\n    });\n  }\n\n}\n\nconst auth0Client = new Auth();\nexport default auth0Client;","map":{"version":3,"sources":["/Users/sitruk/Desktop/bootcamp/homework/project3/project-3/client/src/utils/Auth.js"],"names":["auth0","Auth","constructor","WebAuth","domain","audience","clientID","redirectUri","responseType","scope","getProfile","bind","handleAuthentication","isAuthenticated","signIn","signOut","profile","getIdToken","idToken","Date","getTime","expiresAt","authorize","Promise","resolve","reject","parseHash","err","authResult","setSession","idTokenPayload","exp","logout","returnTo","silentAuth","checkSession","auth0Client"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,UAAlB;;AAEA,MAAMC,IAAN,CAAW;AACTC,EAAAA,WAAW,GAAG;AACZ,SAAKF,KAAL,GAAa,IAAIA,KAAK,CAACG,OAAV,CAAkB;AAC7B;AACAC,MAAAA,MAAM,EAAE,oBAFqB;AAG7BC,MAAAA,QAAQ,EAAE,qCAHmB;AAI7BC,MAAAA,QAAQ,EAAE,kCAJmB;AAK7BC,MAAAA,WAAW,EAAE,gCALgB;AAM7BC,MAAAA,YAAY,EAAE,UANe;AAO7BC,MAAAA,KAAK,EAAE;AAPsB,KAAlB,CAAb;AAUA,SAAKC,UAAL,GAAkB,KAAKA,UAAL,CAAgBC,IAAhB,CAAqB,IAArB,CAAlB;AACA,SAAKC,oBAAL,GAA4B,KAAKA,oBAAL,CAA0BD,IAA1B,CAA+B,IAA/B,CAA5B;AACA,SAAKE,eAAL,GAAuB,KAAKA,eAAL,CAAqBF,IAArB,CAA0B,IAA1B,CAAvB;AACA,SAAKG,MAAL,GAAc,KAAKA,MAAL,CAAYH,IAAZ,CAAiB,IAAjB,CAAd;AACA,SAAKI,OAAL,GAAe,KAAKA,OAAL,CAAaJ,IAAb,CAAkB,IAAlB,CAAf;AACD;;AAEDD,EAAAA,UAAU,GAAG;AACX,WAAO,KAAKM,OAAZ;AACD;;AAEDC,EAAAA,UAAU,GAAG;AACX,WAAO,KAAKC,OAAZ;AACD;;AAEDL,EAAAA,eAAe,GAAG;AAChB,WAAO,IAAIM,IAAJ,GAAWC,OAAX,KAAuB,KAAKC,SAAnC;AACD;;AAEDP,EAAAA,MAAM,GAAG;AACP,SAAKd,KAAL,CAAWsB,SAAX;AACD;;AAEDV,EAAAA,oBAAoB,GAAG;AACrB,WAAO,IAAIW,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtC,WAAKzB,KAAL,CAAW0B,SAAX,CAAqB,CAACC,GAAD,EAAMC,UAAN,KAAqB;AACxC,YAAID,GAAJ,EAAS,OAAOF,MAAM,CAACE,GAAD,CAAb;;AACT,YAAI,CAACC,UAAD,IAAe,CAACA,UAAU,CAACV,OAA/B,EAAwC;AACtC,iBAAOO,MAAM,CAACE,GAAD,CAAb;AACD;;AACD,aAAKE,UAAL,CAAgBD,UAAhB;AACAJ,QAAAA,OAAO;AACR,OAPD;AAQD,KATM,CAAP;AAUD;;AAEDK,EAAAA,UAAU,CAACD,UAAD,EAAa;AACrB,SAAKV,OAAL,GAAeU,UAAU,CAACV,OAA1B;AACA,SAAKF,OAAL,GAAeY,UAAU,CAACE,cAA1B,CAFqB,CAGrB;;AACA,SAAKT,SAAL,GAAiBO,UAAU,CAACE,cAAX,CAA0BC,GAA1B,GAAgC,IAAjD;AACD;;AAEDhB,EAAAA,OAAO,GAAG;AACR,SAAKf,KAAL,CAAWgC,MAAX,CAAkB;AAChBC,MAAAA,QAAQ,EAAE,uBADM;AAEhB3B,MAAAA,QAAQ,EAAE;AAFM,KAAlB;AAID;;AAED4B,EAAAA,UAAU,GAAG;AACX,WAAO,IAAIX,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtC,WAAKzB,KAAL,CAAWmC,YAAX,CAAwB,EAAxB,EAA4B,CAACR,GAAD,EAAMC,UAAN,KAAqB;AAC/C,YAAID,GAAJ,EAAS,OAAOF,MAAM,CAACE,GAAD,CAAb;AACT,aAAKE,UAAL,CAAgBD,UAAhB;AACAJ,QAAAA,OAAO;AACR,OAJD;AAKD,KANM,CAAP;AAOD;;AAtEQ;;AAyEX,MAAMY,WAAW,GAAG,IAAInC,IAAJ,EAApB;AAEA,eAAemC,WAAf","sourcesContent":["import auth0 from 'auth0-js';\n\nclass Auth {\n  constructor() {\n    this.auth0 = new auth0.WebAuth({\n      // the following three lines MUST be updated\n      domain: 'bananaco.auth0.com',\n      audience: 'https://bananaco.auth0.com/userinfo',\n      clientID: 'wattIvPVEm2TSZV0lKxrY65uTtz6VM1o',\n      redirectUri: 'http://localhost:3000/callback',\n      responseType: 'id_token',\n      scope: 'openid profile'\n    });\n\n    this.getProfile = this.getProfile.bind(this);\n    this.handleAuthentication = this.handleAuthentication.bind(this);\n    this.isAuthenticated = this.isAuthenticated.bind(this);\n    this.signIn = this.signIn.bind(this);\n    this.signOut = this.signOut.bind(this);\n  }\n\n  getProfile() {\n    return this.profile;\n  }\n\n  getIdToken() {\n    return this.idToken;\n  }\n\n  isAuthenticated() {\n    return new Date().getTime() < this.expiresAt;\n  }\n\n  signIn() {\n    this.auth0.authorize();\n  }\n\n  handleAuthentication() {\n    return new Promise((resolve, reject) => {\n      this.auth0.parseHash((err, authResult) => {\n        if (err) return reject(err);\n        if (!authResult || !authResult.idToken) {\n          return reject(err);\n        }\n        this.setSession(authResult);\n        resolve();\n      });\n    })\n  }\n\n  setSession(authResult) {\n    this.idToken = authResult.idToken;\n    this.profile = authResult.idTokenPayload;\n    // set the time that the id token will expire at\n    this.expiresAt = authResult.idTokenPayload.exp * 1000;\n  }\n\n  signOut() {\n    this.auth0.logout({\n      returnTo: 'http://localhost:3000',\n      clientID: 'wattIvPVEm2TSZV0lKxrY65uTtz6VM1o',\n    });\n  }\n\n  silentAuth() {\n    return new Promise((resolve, reject) => {\n      this.auth0.checkSession({}, (err, authResult) => {\n        if (err) return reject(err);\n        this.setSession(authResult);\n        resolve();\n      });\n    });\n  }\n}\n\nconst auth0Client = new Auth();\n\nexport default auth0Client;\n"]},"metadata":{},"sourceType":"module"}